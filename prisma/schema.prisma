generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  HospitalAdmin
  SuperAdmin
  RecordOffice
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  firstName     String
  middleName    String
  lastName      String
  cardId        String         @unique
  email         String?        @unique
  contact       String         @unique
  age           Int
  address       String
  gender        String
  hospitals     Hospital[]
  recordOffices RecordOffice[]
  patient       Patient?
  doctor        Doctor?
  labratorist   Labratorist?
  triage        Triage?
}

model SuperAdmin {
  id        Int        @id @unique
  email     String     @unique
  contact   String     @unique
  password  String
  role      Role       @default(SuperAdmin)
  hospitals Hospital[]
}

model Hospital {
  id              Int            @id @default(autoincrement())
  hospitaladminId Int            @unique
  user            User           @relation(fields: [hospitaladminId], references: [id])
  name            String
  address         String
  password        String
  superAdminId    Int
  superAdmin      SuperAdmin     @relation(fields: [superAdminId], references: [id])
  role            Role           @default(HospitalAdmin)
  privileges      Privilege[]
  recordOffices   RecordOffice[]
  triages         Triage[]
  doctors         Doctor[]
  labratorists    Labratorist[]
  patients        Patient[]
  histories       History[]
  reports         Report[]
  triageReports   TriageReport[]
}

model RecordOffice {
  id                Int           @id @default(autoincrement())
  userId            Int           @unique
  user              User          @relation(fields: [userId], references: [id])
  role              Role          @default(RecordOffice)
  password          String
  fieldOfSpeciality String?
  graduateSchool    String?
  hospitals         Hospital      @relation(fields: [hospitalId], references: [id])
  hospitalId        Int
  privileges        Privilege[]
  patients          Patient[]
  doctors           Doctor[]
  labratorists      Labratorist[]
  triages           Triage[]
}

model Triage {
  id                Int            @id @default(autoincrement())
  triageId          Int            @unique
  user              User           @relation(fields: [triageId], references: [id])
  password          String
  fieldOfSpeciality String?
  graduateSchool    String?
  hospitals         Hospital[]
  privileges        Privilege[]
  patients          Patient[]
  recordOffices     RecordOffice[]
  triageReports     TriageReport[]
}

model Doctor {
  id                Int            @id @default(autoincrement())
  doctorId          Int            @unique
  user              User           @relation(fields: [doctorId], references: [id])
  password          String
  fieldOfSpeciality String?
  graduateSchool    String?
  hospitals         Hospital[]
  privileges        Privilege[]
  patients          Patient[]
  history           History[]
  recordOffices     RecordOffice[]
}

model Labratorist {
  id                Int           @id @default(autoincrement())
  userId            Int           @unique
  user              User          @relation(fields: [userId], references: [id])
  password          String
  fieldOfSpeciality String?
  graduateSchool    String?
  hospitals         Hospital[]
  privileges        Privilege[]
  patients          Patient[]
  reports           Report[]
  RecordOffice      RecordOffice? @relation(fields: [recordOfficeId], references: [id])
  recordOfficeId    Int?
}

model Patient {
  id            Int            @id @default(autoincrement())
  patientId     Int            @unique
  user          User           @relation(fields: [patientId], references: [id])
  hospitals     Hospital[]
  recordOffices RecordOffice[]
  doctors       Doctor[]
  histories     History[]
  labratorists  Labratorist[]
  reports       Report[]
  triages       Triage[]
  triageReports TriageReport[]
}

model Privilege {
  id             Int           @id @default(autoincrement())
  canCreate      Boolean       @default(false)
  canView        Boolean       @default(false)
  canUpdate      Boolean       @default(false)
  canDelete      Boolean       @default(false)
  hospitalId     Int?
  hospital       Hospital?     @relation(fields: [hospitalId], references: [id])
  doctorId       Int?
  doctor         Doctor?       @relation(fields: [doctorId], references: [id])
  labratoristId  Int?
  labratorist    Labratorist?  @relation(fields: [labratoristId], references: [id])
  recordOfficeId Int?
  recordOffice   RecordOffice? @relation(fields: [recordOfficeId], references: [id])
  triageId       Int?
  triage         Triage?       @relation(fields: [triageId], references: [id])
}

model History {
  id         Int      @id @default(autoincrement())
  historyDay DateTime @default(now())
  history    String
  hospitalId Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  doctorId   Int
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  patientId  Int
  patient    Patient  @relation(fields: [patientId], references: [id])
}

model Report {
  id            Int         @id @default(autoincrement())
  reportedDay   DateTime    @default(now())
  reports       String
  hospitalId    Int
  hospital      Hospital    @relation(fields: [hospitalId], references: [id])
  patientId     Int
  patient       Patient     @relation(fields: [patientId], references: [id])
  labratoristId Int
  labratorists  Labratorist @relation(fields: [labratoristId], references: [id])
}

model TriageReport {
  id            Int      @id @default(autoincrement())
  triagedDay    DateTime @default(now())
  triageReports String
  hospitalId    Int
  hospital      Hospital @relation(fields: [hospitalId], references: [id])
  patientId     Int
  patient       Patient  @relation(fields: [patientId], references: [id])
  triageId      Int
  triage        Triage   @relation(fields: [triageId], references: [id])
}
